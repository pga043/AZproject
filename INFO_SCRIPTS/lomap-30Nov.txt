In [31]: G = nx.Graph()

In [32]: for edge in nx_graph.edges(data=True):
    ...:     G.add_edge(edge[0], edge[1], weight=-math.log(nx_graph.edges[edge[0], edge[1]]['similarity']))


all_paths = list(nx.all_simple_paths(G, source=0, target=1))


In [36]: for path in range(len(all_paths)):
    ...:     print(path)
    ...:     pathGraph = nx.path_graph(all_paths[path])
    ...:     weights = []
    ...:     weights.clear()
    ...:     for ea in pathGraph.edges():
    ...:         weights.append(G.edges[ea[0], ea[1]]['weight'])
    ...:     print('final score: ' + str(round(sum(weights) / pathGraph.number_of_edges(), 4)))


#-------------------------------------------------------


import lomap

import networkx as nx

db_mol = lomap.DBMolecules(".", output=True, name='lomap')

strict, loose = db_mol.build_matrices()

nx_graph = db_mol.build_graph()

for_frag = []
for_frag.clear()
for edge in nx_graph.edges(data=True):
    score = nx_graph.edges[[edge[0], edge[1]]]['similarity']
    if score > 0.4:
        print('transformation: ' + str(nx_graph.nodes[edge[0]]['fname_comp']) + ' <--> ' + str(nx_graph.nodes[edge[1]]['fname_comp']))
    else:
        for_frag.append(nx_graph.nodes[edge[0]]['fname_comp'])
        for_frag.append(nx_graph.nodes[edge[1]]['fname_comp'])
        #print('Fragmentation required: ' + str(nx_graph.nodes[edge[0]]['fname_comp']) + ' <--> ' + str(nx_graph.nodes[edge[1]]['fname_comp']))


for_fragments = list(set(for_frag))
os.makedirs('frags', exist_ok=True)

for mol in range(len(for_fragments)):
    shutil.copy(for_fragments[mol], 'frags/')


molecules = []
for f in glob.glob("frags/*.sdf"):
    tmp = Chem.SDMolSupplier(f, removeHs=False)
    smi = Chem.MolToSmiles(tmp[0])
    mol = Chem.MolFromSmiles(smi)
    molecules.append(mol)


du = Chem.MolFromSmiles('*')

all_smiles = []
all_smiles.clear()

##************************
## suppress rdkit warnings
RDLogger.DisableLog('rdApp.*')
##************************

## fragmenting using BRICSDecompose
for mol in molecules:
    frags = list(Chem.BRICS.BRICSDecompose(mol, minFragmentSize=1, keepNonLeafNodes=True, returnMols=False))
    ##if returnMols = False
    mols = [Chem.MolFromSmiles(x) for x in frags]
    ## replace dummy atoms with hydrogens
    molh = [AllChem.ReplaceSubstructs(x,du,Chem.MolFromSmiles('[H]'), True)[0] for x in mols]
    ## convert mols to smiles
    all_smiles.append([Chem.MolToSmiles(x) for x in molh])





